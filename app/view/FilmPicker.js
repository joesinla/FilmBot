/*
 * File: app/view/FilmPicker.js
 *
 * This file was generated by Sencha Architect version 2.2.1.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.2.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.view.FilmPicker', {
    extend: 'Ext.picker.Picker',
    alias: 'widget.filmpicker',

    config: {
        id: 'FilmPicker',
        hideOnMaskTap: true,
        useTitles: true,
        doneButton: {
            itemId: 'mybutton7'
        },
        slots: [
            {
                xtype: 'pickerslot',
                flex: 2,
                id: 'mSlot',
                itemId: 'mSlot',
                width: '55px',
                name: 'mSlot',
                data: [
                    {
                        text: '',
                        value: ''
                    }
                ]
            },
            {
                xtype: 'pickerslot',
                flex: '2',
                id: 'tSlot',
                itemId: 'tSlot',
                name: 'tSlot',
                data: [
                    {
                        text: '',
                        value: ''
                    }
                ]
            },
            {
                xtype: 'pickerslot',
                flex: '1',
                id: 'sSlot',
                itemId: 'sSlot',
                name: 'sSlot',
                data: [
                    {
                        text: '',
                        value: ''
                    }
                ]
            }
        ],
        listeners: [
            {
                fn: 'onMybutton7Tap',
                event: 'tap',
                delegate: '#mybutton7'
            },
            {
                fn: 'onMypickerslotSlotpick',
                event: 'slotpick',
                delegate: '#mSlot'
            },
            {
                fn: 'onMypickerslot1Slotpick',
                event: 'slotpick',
                delegate: '#tSlot'
            },
            {
                fn: 'onMypickerslot2Slotpick',
                event: 'slotpick',
                delegate: '#sSlot'
            },
            {
                fn: 'onFilmPickerHide',
                event: 'hide'
            }
        ]
    },

    onMybutton7Tap: function(button, e, eOpts) {

    },

    onMypickerslotSlotpick: function(pickerslot, value, node, eOpts) {
        this.getInnerItems()[2].getStore().removeAll();


        var store = Ext.getStore('Rolls');
        store.clearFilter();

        console.log(pickerslot.getValue(true));
        //store.load();
        store.filter('Manufacturer', pickerslot.getValue(true));

        var types = [];
        store.each(function(obj){

            types.push(obj.getData().Type);
        });

        var uniqueArray = types.filter(function(elem, pos) {
            return types.indexOf(elem) == pos;
        });

        var tData = [[{"text":"","value":""}]];
        Ext.each(uniqueArray,function(elem){
            tData.push({"text":elem,"value":elem});
        });



        this.getInnerItems()[1].getStore().setData(tData);


    },

    onMypickerslot1Slotpick: function(pickerslot, value, node, eOpts) {
        var store = Ext.getStore('Rolls');
        store.clearFilter();

        console.log(pickerslot.getValue(true));
        //store.load();
        store.filter('Type', pickerslot.getValue(true));

        var types = [];
        store.each(function(obj){

            types.push(obj.getData().Size);
        });

        var uniqueArray = types.filter(function(elem, pos) {
            return types.indexOf(elem) == pos;
        });

        var tData = [[{"text":"","value":""}]];
        Ext.each(uniqueArray,function(elem){
            tData.push({"text":elem,"value":elem});
        });

        this.getInnerItems()[2].getStore().setData(tData);
    },

    onMypickerslot2Slotpick: function(pickerslot, value, node, eOpts) {

    },

    onFilmPickerHide: function(component, eOpts) {

        var form = Ext.getCmp('AddWindowPanel');

        var mnfValue = component.getValue().mSlot;
        var typeValue = component.getValue().tSlot;
        var shadeValue = component.getValue().sSlot;

        //this.getTypeSlot().deselectAll();
        //this.getShadeSlot().deselectAll();

        if(mnfValue && typeValue && shadeValue){
            form.setValues({Manufacturer : mnfValue});
            form.setValues({Type : typeValue});
            form.setValues({Shade : shadeValue});

            Ext.getCmp('FilmSelect').setPlaceHolder(typeValue + "  %" + shadeValue);

            //??
            Ext.getStore("Rolls").clearFilter();

        }

    },

    initialize: function() {
        this.callParent();


        var store = Ext.getStore('Rolls');

        var typesData = [];
        store.each(function(roll){
            typesData.push(roll.get('Manufacturer'));
        });

        var uniqueArray = typesData.filter(function(elem, pos) {
            return typesData.indexOf(elem) == pos;
        });

        var tData = [{text:"",value:""}];

        Ext.each(uniqueArray,function(elem){
            tData.push({"text":elem,"value":elem});
        });

        this.getInnerItems()[0].getStore().setData(tData);
    }

});