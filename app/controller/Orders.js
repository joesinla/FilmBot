/*
 * File: app/controller/Orders.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.1.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.controller.Orders', {
    extend: 'Ext.app.Controller',

    config: {
        refs: {
            orders: '#orders',
            enterOrder: {
                forceCreate: true,
                selector: '#enterOrder'
            },
            TabPanel: '#newOrder',
            windowForm: '#AddWindowPanel',
            ActionPanel: '#ActionPanel',
            MnfSlot: '#MnfSlot',
            TypeSlot: '#TypeSlot',
            ShadeSlot: '#ShadeSlot',
            FilmPicker: {
                autoCreate: true,
                selector: '#FilmPicker',
                xtype: 'FilmPicker'
            },
            CustomerForm: '#CustomerPanel',
            WindowList: '#WindowList',
            OrderList: '#OrderList'
        },

        control: {
            "#addOrder": {
                tap: 'onAddOrderButtonTap'
            },
            "#closeOrder": {
                tap: 'onCloseOrderButtonTap'
            },
            "#enterOrder": {
                tap: 'onEnterButtonTap'
            },
            "#ActionDelete": {
                tap: 'onActionDeleteButtonTap'
            },
            "#ActionEmail": {
                tap: 'onActionEmailButtonTap'
            },
            "textfield": {
                tap: 'onTextfieldTap'
            },
            "#MnfSlot": {
                slotpick: 'onMnfPickerslotSlotpick'
            },
            "#TypeSlot": {
                slotpick: 'onTypePickerslotSlotpick'
            },
            "#FilmPicker": {
                hide: 'onFilmPickerHide',
                dragend: 'onMnfSlotDragEnd'
            },
            "#actionBttn": {
                tap: 'onActionButtonTap'
            },
            "#ActionSave": {
                tap: 'onActionSaveButtonTap'
            },
            "#OrderList": {
                select: 'onOrderListSelect',
                disclose: 'onOrderListDisclose'
            },
            "#WindowList": {
                disclose: 'onWindowListDisclose'
            },
            "#ActiveBttn": {
                tap: 'onActiveButtonTap'
            },
            "#StatusButtons": {
                toggle: 'onSegmentedbuttonToggle'
            }
        }
    },

    onAddOrderButtonTap: function(button, e, options) {
        this.getOrders().animateActiveItem(1, {type:'slide',direction:'up'});

        var bttn = Ext.getCmp('addOrder');


        bttn.setIconCls('arrow_down');
        bttn.setItemId('closeOrder');
        bttn.setId('closeOrder');

        bttn.observableId = '#closeOrder';

        this.newOrder();

        /*
        this.getCustomerForm().reset();
        this.getCustomerForm().setRecord(null);

        if(Ext.getStore('temp')){Ext.getStore('temp').removeAll();}

        */
    },

    onCloseOrderButtonTap: function(button, e, options) {
        this.getOrders().animateActiveItem(0, {type:'slide',direction:'down'});

        var bttn = Ext.getCmp('addOrder');

        bttn.setIconCls('add');
        bttn.setItemId('addOrder');
        bttn.setId('addOrder');

        bttn.observableId = '#addOrder';
    },

    onEnterButtonTap: function(button, e, options) {
        Ext.Viewport.setMasked({
            xtype: 'loadmask',
            message: 'Calculating...'
        });
        new Ext.util.DelayedTask(function () {
            Ext.Viewport.setMasked(false);    
        }).delay(450);



        var form = this.getWindowForm();
        var values = form.getValues();



        var calc = MyApp.app.getController('Calc').calc(values.Type, values.Shade, values.Panes,values.Width,values.Height);



        var windowModel = Ext.create('MyApp.model.Window',{
            Panes: values.Panes,
            Width: values.Width,
            Height: values.Height,
            Manufacturer: values.Manufacturer,
            Type: values.Type,
            Shade: values.Shade,
            Location: values.Location,
            Direction: values.Direction,
            RollSize: calc[0],
            LinearFeet: calc[1],
            Cut: calc[5]

        });



        if(!Ext.getStore('temp')){
            tempStore = new Ext.data.Store();
            tempStore.setModel(Ext.ModelManager.getModel('Window'));
            tempStore.setStoreId('temp');

        }else{
            windowStore = Ext.getStore('temp');
        }

        tempStore.add(windowModel);
        this.getWindowList().setStore('temp');

        //reset form
        var z = form.getInnerItems();

        Ext.each(z[0].getInnerItems(), function(item){
            var a = item.getInnerItems();
            Ext.each(a, function(item){
                item.reset();
            });
        });


        //reset window set details
        /*
        Ext.each(z[1].getInnerItems(), function(item){

        if(item.id != "FilmSelect"){
        //console.log(item.id);
        item.reset();
    }else{
        item.setPlaceHolder('');
    }
            });

            */
    },

    onActionDeleteButtonTap: function(button, e, options) {
        Ext.Msg.confirm(  
        "Confirm", 
        "Do you wish to delete Order " + this.getCustomerForm().getRecord().getData().Number + " ?", 
        function(button){
            if (button == 'yes') {
                var record = MyApp.app.getController('Orders').getCustomerForm().getRecord();
                MyApp.app.getController('Orders').deleteOrder(record);
            } else {
                return false;
            }
        });


    },

    onActionEmailButtonTap: function(button, e, options) {
        console.log('email tap');

        var tempStore = Ext.getStore('temp');

        var records = tempStore.getData().items;

        var tbl = '<table width="316" border="1">'+
        '<tr>'+
        '<th width="99" scope="col">header</th>'+
        '<th width="9" scope="col">1</th>'+
        '<th width="9" scope="col">2</th>'+
        '<th width="9" scope="col">3</th>'+
        '<th width="9" scope="col">4</th>'+
        '<th width="9" scope="col">5</th>'+
        '<th width="9" scope="col">6</th>'+
        '</tr>'+
        '<tr>'+
        '<td>1</td>'+
        '<td>2</td>'+
        '<td>3</td>'+
        '<td>4</td>'+
        '<td>5</td>'+
        '<td>6</td>'+
        '<td>7</td>'+
        '</tr>'+
        '</table>'+
        '</body>'+
        '</html>';





        window.open('mailto:joesinla@gmail.com?Subject=OnlineQuote&body=' + tbl);
    },

    onTextfieldTap: function(textfield) {
        var fPicker = this.getFilmPicker();

        var store = Ext.getStore('Rolls');
        var types = store.getData().items;

        var typesData = [];
        Ext.each(types, function(type){
            typesData.push(type.getData().Manufacturer);
        });

        var uniqueArray = typesData.filter(function(elem, pos) {
            return typesData.indexOf(elem) == pos;
        });

        var tData = [{text:"",value:""}];

        Ext.each(uniqueArray,function(elem){
            tData.push({"text":elem,"value":elem});
        });

        var slot = this.getMnfSlot().setData(tData);

        Ext.Viewport.add(fPicker);
        fPicker.show();
    },

    onMnfPickerslotSlotpick: function(slot, value, node, options) {
        this.getShadeSlot().setData([""]);

        var mnfSlot = this.getMnfSlot();

        var mnfValue = mnfSlot.getSelection()[0].getData().value;

        var store = Ext.getStore('Rolls');
        store.clearFilter();

        //store.load();
        store.filter('Manufacturer', mnfValue);

        var types = [];
        Ext.each(store.getData().items, function(obj){
            types.push(obj.getData().Type);
        });

        var uniqueArray = types.filter(function(elem, pos) {
            return types.indexOf(elem) == pos;
        });

        var tData = [{text:"",value:""}];
        Ext.each(uniqueArray,function(elem){
            tData.push({"text":elem,"value":elem});
        });

        this.getTypeSlot().setData(tData);
    },

    onTypePickerslotSlotpick: function(slot, value, node, options) {
        var typeSlot = this.getTypeSlot();

        var typeValue = typeSlot.getSelection()[0].getData().value;

        var store = Ext.getStore('Rolls');
        store.filter('Type', typeValue);

        var shades = [];
        Ext.each(store.getData().items, function(obj){
            shades.push(obj.getData().Shade);
        });

        var uniqueArray = shades.filter(function(elem, pos) {
            return shades.indexOf(elem) == pos;
        });

        var tData = [{text:"",value:""}];
        Ext.each(uniqueArray,function(elem){
            tData.push({"text":elem,"value":elem});
        });

        this.getShadeSlot().setData(tData);
    },

    onFilmPickerHide: function(component, options) {
        this.getTypeSlot().setData([""]);
        this.getShadeSlot().setData([""]);

        var form = this.getWindowForm();

        var mnfValue = this.getMnfSlot().getSelection()[0].getData().value;
        var typeValue = this.getTypeSlot().getSelection()[0].getData().value;
        var shadeValue = this.getShadeSlot().getSelection()[0].getData().value;

        this.getTypeSlot().deselectAll();
        this.getShadeSlot().deselectAll();

        if(mnfValue && typeValue && shadeValue){
            form.setValues({Manufacturer : mnfValue});
            form.setValues({Type : typeValue});
            form.setValues({Shade : shadeValue});

            Ext.getCmp('FilmSelect').setPlaceHolder(typeValue + "  %" + shadeValue);

            //??
            Ext.getStore("Rolls").clearFilter();

        }
    },

    onActionButtonTap: function(button, e, options) {
        var actionSheet = Ext.getCmp('ActionPanel').show();
    },

    onActionSaveButtonTap: function(button, e, options) {
        //var record = this.getCustomerForm().getRecord();

        this.saveOrder();

        /*
        if(record === null){
        this.saveOrder();
        }else{
        this.updateOrder(record);
        }


        Ext.getStore('Orders').load();
        */

        this.getActionPanel().hide();
    },

    onOrderListSelect: function(dataview, record, options) {
        this.getCustomerForm().setRecord(record);

        //set status button to value of current orders status
        /*var statusBtn = this.getOrders().down('#StatusButtons');
        switch (record.getData().Status){
        case "Active":
        statusBtn.setPressedButtons(0);
        break;
        case "Hold":
        statusBtn.setPressedButtons(1);
        break;
        case "Complete":
        statusBtn.setPressedButtons(2);
        break;
        }
        */



        //find store if exist, erase it, then create a new temp store and populate it with windows from record
        if(Ext.getStore('temp')){
            Ext.getStore('temp').removeAll();
        }

        tempStore = new Ext.data.Store();
        tempStore.setModel(Ext.ModelManager.getModel('Window'));
        tempStore.setStoreId('temp'); 


        var windowStore = Ext.getStore('Windows');


        if(windowStore.isFiltered()){
            windowStore.clearFilter();
        }

        windowStore.filter('order_id', record.getId());


        var windows = windowStore.getData().items;


        Ext.each(windows, function(record){
            tempStore.add(record);
        });

        windowStore.clearFilter();

        tempStore.load();

        //set windowshasrolls store to filter by this order id
        //Ext.getStore('Windows_has_rolls').filter('Order_id'

        this.getWindowList().setStore('temp');

        this.getOrderList().deselectAll();

        this.getOrders().animateActiveItem(1, {type:'slide',direction:'up'});

        var bttn = Ext.getCmp('addOrder');

        bttn.setIconCls('arrow_down');
        bttn.setItemId('closeOrder');
        bttn.setId('closeOrder');

        bttn.observableId = '#closeOrder';
    },

    onWindowListDisclose: function(list, record, target, index, e, options) {
        Ext.Msg.confirm(
        "Confirm", 
        "Do you wish to delete window?", 
        function(button){
            if (button == 'yes') {
                store = Ext.getStore('temp');
                store.remove(record);

            } else {
                return false;
            }
        });
    },

    onOrderListDisclose: function(list, record, target, index, e, options) {
        Ext.Msg.confirm(
        "Confirm", 
        "Do you wish to delete Order " + record.getData().Number + " ?", 
        function(button){
            if (button == 'yes') {
                MyApp.app.getController('Orders').deleteOrder(record);
            } else {
                return false;
            }
        });

    },

    onMnfSlotDragEnd: function() {
        console.log('drag end');

        var mnfSlot = this.getMnfSlot();

        var mnfValue = mnfSlot.getSelection()[0].getData().value;

        console.log(mnfValue);
    },

    onActiveButtonTap: function(button, e, options) {
        console.log('active');
    },

    onSegmentedbuttonToggle: function(segmentedbutton, button, isPressed, options) {
        this.getCustomerForm().getRecord().set('Status', button.getText());

        console.log('event');
    },

    saveOrder: function(order) {
        /*
        * Save Order and Windows
        *
        */ 

        var orderStore = Ext.getStore('Orders');
        var temp = Ext.getStore('temp');
        var windowStore = Ext.getStore('Windows');
        var orderModel = this.getCustomerForm().getRecord();

        //if order is phantom then order must be a new save
        if(orderModel.phantom === true){

            orderModel.set(this.getCustomerForm().getValues());
            //get temp store and add it to windows store through adding it to ordermodel
            temp.each(function(record){

                orderModel.windows().add(record);
                windowStore.add(record);
            });
            //otherwise update the order  
        }else{
            orderModel.set(this.getCustomerForm().getValues());
            orderModel.set({Updated: Date.now()});

            //remove all windows that match order id
            windowStore.filter('order_id', orderModel.getId());

            windowStore.load();

            var windows = windowStore.getData().items;

            Ext.each(windows, function(r){
                r.erase();
            });

            if(windowStore.isFiltered()){windowStore.clearFilter();}

            //replace widnowstore with updated window records
            temp.each(function(r){
                orderModel.windows().add(r);
                windowStore.add(r);
                //r.save()
            });
        }

        orderStore.add(orderModel);

        this.getCustomerForm().setRecord(orderModel);

        //refresh order list
        Ext.getStore('Orders').load();
        this.getOrderList().refresh();

        //refresh window store
        var sStre = Ext.getStore('Windows');
        sStre.sync();
        sStre.load();


        //Reserve film per window on order//
        var reserved = MyApp.app.getController('Inventory').reserveFilm(orderModel);

        if(reserved){

        }else{

        }

        return;
    },

    deleteOrder: function(record) {
        //get stores..
        var windowStore = Ext.getStore('Windows');
        var orderStore = Ext.getStore('Orders');
        var tempstore = Ext.getStore('temp');

        windowStore.filter('order_id', record.getId());

        windowStore.load();

        var windows = windowStore.getData().items;

        Ext.each(windows, function(r){
            windowStore.remove(r);
        });

        if(windowStore.isFiltered()){windowStore.clearFilter();}



        //delete record 
        orderStore.remove(record);

        //reset all order forms
        this.getCustomerForm().reset();

        var x = this.getWindowForm().getInnerItems();

        Ext.each(x[0].getInnerItems(), function(item){
            var a = item.getInnerItems();
            Ext.each(a, function(item){
                console.log(item);
                item.reset();
            });
        });

        //reset window set details
        Ext.each(x[1].getInnerItems(), function(item){

            if(item.id != "FilmSelect"){
                item.reset();
            }else{
                item.setPlaceHolder('');
            }
        });

        //clear temp window store
        if(tempstore){
            tempstore.removeAll();
            tempstore.load();
        }

        //refresh order list
        orderStore.load();
        this.getOrderList().refresh();


        this.getActionPanel().hide();
    },

    createTotals: function() {
        x = new Ext.store.Windows();


        console.log(x);
    },

    newOrder: function() {
        this.getCustomerForm().reset();
        this.getCustomerForm().setRecord(null);

        if(Ext.getStore('temp')){Ext.getStore('temp').removeAll();}

        //new order #
        var orderNumber = Math.floor(Math.random()*90000) + 10000;

        var orderModel = Ext.create('MyApp.model.Order');

        orderModel.set({
            Number: orderNumber,
            Created: Date.now(),
            Status: "Active"
        });

        this.getCustomerForm().setRecord(orderModel);
        this.getOrders().down('#StatusButtons').setPressedButtons(0);
    }

});