/*
 * File: app/controller/Employee.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.2.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.controller.Employee', {
    extend: 'Ext.app.Controller',

    config: {
        refs: {
            upfile: '#upfile',
            upfilebtn: '#upfilebtn',
            picform: '#picform',
            EmployeeForm: '#EmployeeForm',
            employees: '#employees',
            employeePic: '#EmployeePic'
        },

        control: {
            "#EnterEmployeeBtn": {
                tap: 'onEnterEmployeeBtnTap'
            },
            "#addEmployee": {
                tap: 'onAddEmployeeBtnTap'
            },
            "#closeEmployee": {
                tap: 'onCloseEmployeeBtnTap'
            },
            "#fileBtn": {
                success: 'onButtonSuccess'
            },
            "#EmployeeList": {
                select: 'onListSelect',
                disclose: 'onEmployeeListDisclose'
            }
        }
    },

    onEnterEmployeeBtnTap: function(button, e, eOpts) {
        this.saveEmployee();
    },

    onAddEmployeeBtnTap: function(button, e, eOpts) {
        this.getEmployees().animateActiveItem(1, {type:'slide',direction:'up'});

        var bttn = Ext.getCmp('addEmployee');

        bttn.setIconCls('arrow_down');
        bttn.setItemId('closeEmployee');
        bttn.setId('closeEmployee');

        bttn.observableId = '#closeEmployee';


        var form = this.getEmployeeForm();

        form.reset();
        form.setRecord(null);

        //this.newOrder();
    },

    onCloseEmployeeBtnTap: function(button, e, eOpts) {
        this.getEmployees().animateActiveItem(0, {type:'slide',direction:'down'});

        var bttn = Ext.getCmp('addEmployee');

        bttn.setIconCls('add');
        bttn.setItemId('addEmployee');
        bttn.setId('addEmployee');

        bttn.observableId = '#addEmployee';

        //this.clearOrder();
    },

    onButtonSuccess: function(button, response, tis, el) {
        response = Ext.JSON.decode(response.response);

        //add to current form model
        var record = this.getEmployeeForm().getRecord();

        record.set("PicUrl",response.name);

        //set picture
        this.getEmployeePic().setSrc("php/images/" + response.name);
    },

    onListSelect: function(dataview, record, eOpts) {
        this.getEmployees().animateActiveItem(1, {type:'slide',direction:'up'});

        var bttn = Ext.getCmp('addEmployee');

        bttn.setIconCls('arrow_down');
        bttn.setItemId('closeEmployee');
        bttn.setId('closeEmployee');

        bttn.observableId = '#closeEmployee';

        this.getEmployeeForm().setRecord(record);
    },

    onEmployeeListDisclose: function(list, record, target, index, e, eOpts) {
        var that = this;

        Ext.Msg.confirm(
        "Confirm", 
        "Do you wish to delete1 " + record.getData().First + " ?", 
        function(button){
            if (button === 'yes') {
                that.deleteEmployee(record);
            } else {
                return false;
            }
        });

    },

    deleteEmployee: function(record) {
        var store = Ext.getStore('Employees');

        store.remove(record);

        store.sync();

    },

    saveEmployee: function() {
        var store = Ext.getStore("Employees"),
            form = this.getEmployeeForm(),
            values = form.getValues(),
            record = form.getRecord();

        if(record === null){
            //create new model and add to store

            model = Ext.create('MyApp.model.Employee', values);
            model.set('EmployeeId', Math.floor(Math.random()*90000) + 10000);
            form.setRecord(model);
            store.add(model);


        }else{
            //update record
            var employeeRecord = store.getAt(store.findExact('EmployeeId', record.get('EmployeeId')));
            employeeRecord.set(values);
            store.add(employeeRecord);
        }

        store.sync();
        store.load();


        this.getEmployeeForm().down('#EnterEmployeeBtn').setText('Added!');
    }

});