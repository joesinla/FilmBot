/*
 * File: app/controller/Inventory.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.2.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.controller.Inventory', {
    extend: 'Ext.app.Controller',

    config: {
        refs: {
            inventory: '#inventory',
            invForm: '#InventoryForm'
        },

        control: {
            "#addInventory": {
                tap: 'onAddInventoryButtonTap'
            },
            "#closeInventory": {
                tap: 'onCloseInventoryButtonTap'
            },
            "#InventoryEnter": {
                tap: 'onInventoryEnterButtonTap'
            },
            "#InventoryList": {
                disclose: 'onListDisclose'
            }
        }
    },

    onAddInventoryButtonTap: function(button, e, eOpts) {
        this.getInventory().animateActiveItem(1, {type:'slide',direction:'up'});

        var bttn = Ext.getCmp('addInventory');

        bttn.setIconCls('arrow_down');
        bttn.setItemId('closeInventory');
        bttn.setId('closeInventory');

        bttn.observableId = '#closeInventory';
    },

    onCloseInventoryButtonTap: function(button, e, eOpts) {
        this.getInventory().animateActiveItem(0, {type:'slide',direction:'down'});

        var bttn = Ext.getCmp('addInventory');

        bttn.setIconCls('add');
        bttn.setItemId('addInventory');
        bttn.setId('addInventory');

        bttn.observableId = '#addInventory';
    },

    onInventoryEnterButtonTap: function(button, e, eOpts) {
        Ext.Viewport.setMasked({
            xtype: 'loadmask',
            message: 'Added Roll'
        });
        new Ext.util.DelayedTask(function () {
            Ext.Viewport.setMasked(false);    
        }).delay(450);

        this.addRoll();
    },

    onListDisclose: function(list, record, target, index, e, eOpts) {
        var that = this;
        Ext.Msg.confirm(
        "Confirm", 
        "Do you wish to delete roll?", 
        function(button){
            if (button == 'yes') {

                that.deleteRoll(record);
            } else {
                return false;
            }
        });
    },

    addRoll: function(record) {
        //get form and values
        var form = this.getInvForm();
        var formData = form.getValues();

        //create model
        var rollModel = Ext.create('MyApp.model.Roll', formData);


        //get store
        var rollStore = Ext.getStore('Rolls');

        record = rollStore.findRecord('RollNumber', formData.RollNumber,0,false,false,true);

        if(record !== null){
            alert('This roll already exists.');
        }else{            

            rollStore.add(rollModel);
            rollStore.sync();//Ext.bind(this.getApplication().getController('ioControl').syncCallback, this));
            rollStore.load();
            //form.reset();
        }
    },

    deleteRoll: function(record) {
        var rollStore = Ext.getStore('Rolls');
        rollStore.remove(record);
        rollStore.sync();//Ext.bind(this.getApplication().getController('ioControl').syncCallback, this));
    },

    reserveFilm: function(order) {
        order = order.getData();

        var windows = order.windows;
        var me = this;
        var whrStore = Ext.getStore('Windows_has_Rolls');
        whrStore.load();


        //each window in the order gets assigned to one or more rolls
        //if the rolls in inventory run out of film start a new roll with a rollnumber null
        Ext.each(windows, function(window){ 

            //perform check on windows_has_rolls to check if this window has been entered
            var record = whrStore.findRecord('Window_id', window.id);

            if(record === null){ 

                var rollStore = me.getRoll(window.Type, window.Shade, window.RollSize);
                rollStore.sort('LinearFeet', 'ASC');

                var rolls = rollStore.getData().items;
                var panes = window.Panes;
                var windowLength = window.LinearFeet / panes;
                var linearFeet = window.LinearFeet;

                /*
                1. Get film from inventory rolls that where matched to the window
                --each film roll check to see if it has enough film, if it does then take away
                from the rolls linearfeet value and add to reserved value, if not move to the next roll-- */

                for(var i = 0; rolls.length > i; i++){
                    var windowid = window.id;

                    if(linearFeet === 0) break;

                    var data = rolls[i].getData();

                    if(data.LinearFeet < windowLength) continue;

                    var dividend = Math.floor(data.LinearFeet / windowLength);
                    var needed;

                    if(linearFeet >= data.LinearFeet){
                        needed = dividend * windowLength;
                    }else{
                        needed = linearFeet;
                    }

                    rolls[i].set('LinearFeet', data.LinearFeet - needed);
                    rolls[i].set('ReservedLinearFeet', data.ReservedLinearFeet + needed);

                    var whrModel = Ext.create('MyApp.model.Window_has_Roll', {
                        Window_id: windowid,
                        Roll_id: data.id,
                        LinearFeet: needed
                    });

                    linearFeet -= needed;


                    whrStore.add(whrModel);
                    whrStore.sync();
                    whrStore.load();
                    //whrModel.save();
                    //rolls[i].save();

                }


                /*
                2.Second create new rolls that need to be ordered and label roll number need
                --create a roll model and save it with a reserved value of the amount needed, if the
                amount needed is greater than 100ft, (loop back) create another roll model -- */
                if(linearFeet > 0){

                    var stillNeeded;

                    while( linearFeet > 0 ){
                        if(linearFeet < 100){

                            stillNeeded = linearFeet;
                            linearFeet -= linearFeet;
                        }else{
                            stillNeeded = 100;
                            linearFeet -= 100;
                        }

                        var whrNewModel = Ext.create('MyApp.model.Window_has_Roll', {
                            Window_id: window.id,
                            Roll_id: 0,
                            LinearFeet: stillNeeded
                        });

                        whrStore.add(whrNewModel);
                        whrNewModel.save();
                    }

                }

                rollStore.clearFilter();

            }//end if window exists check in windowshasrolls store


        });//end window loop


        return true;
    },

    getRoll: function(type, shade, size) {
        var store = Ext.getStore('Rolls');

        store.clearFilter();

        if(size){
            store.filterBy(function(record){
                var x = (record.get('Type') == type) && (record.get('Shade') == shade) && (record.get('Size') == size);
                return x;
            });   
        }else{
            store.filterBy(function(record){
                var x = (record.get('Type') == type) && (record.get('Shade') == shade);
                return x;
            });
        }

        return store;
    },

    refreshStore: function() {
        var store = Ext.getStore('Rolls');
        store.sync();
        store.load();
    },

    reserveFilm2: function(records, action) {
        switch (action){
            case 'add':
            console.log('add records', records);
            break;
            case 'delete':
            console.log('delete records', records);
            break;
            case 'update':
            console.log('update records', records);
            break;
        }
    }

});