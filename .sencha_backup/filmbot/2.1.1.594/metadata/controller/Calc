{
    "type": "controller",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "designer|userClassName": "Calc"
    },
    "id": "ExtBox1-ext-gen21406",
    "designerId": "09c1fa57-66c8-4591-925d-7db1f10f8235",
    "cn": [
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "MyFunction8",
                "fn": "calc",
                "designer|params": [
                    "type",
                    "shade",
                    "panes",
                    "width",
                    "height"
                ],
                "implHandler": [
                    "rolls = Ext.getStore('Rolls');",
                    "",
                    "var rolls = MyApp.app.getController('Inventory').getRoll(type, shade);",
                    "",
                    "var sizes = [], ",
                    "    results;",
                    "",
                    "Ext.each(rolls.getData().items, function(roll){",
                    "    sizes.push(roll.getData().Size);       ",
                    "});",
                    "",
                    "",
                    "//returned array \"bestRoll, linearFt, adjSqft, actSqft, excess, pull, scrap\"",
                    "singleCut = this.singleCut(sizes, panes, width, height);",
                    "splitCut = this.splitCut(sizes, panes, width, height);",
                    "",
                    "",
                    "excess1 = singleCut[4];",
                    "excess2 = splitCut[4];",
                    "",
                    "",
                    "if(isNaN(excess2)){",
                    "    results = singleCut;",
                    "} else if ((excess1 <= 0) && (excess2 <= 0)) {",
                    "    results = singleCut;",
                    "} else if (excess1 < 0) {",
                    "    results = splitCut;",
                    "} else if (excess2 < 0) {",
                    "    results = singleCut;",
                    "} else if (excess1 <= excess2) {",
                    "    results = singleCut;",
                    "} else if (excess2 <= excess1) {",
                    "    results = splitCut;",
                    "} else {",
                    "    console.log(\"error\");",
                    "}",
                    "",
                    "return results;",
                    "",
                    ""
                ]
            },
            "designerId": "f58a5afe-986a-424c-8349-e9be1e3f77dc"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "singleCut",
                "fn": "singleCut",
                "designer|params": [
                    "sizes",
                    "panes",
                    "width",
                    "height"
                ],
                "implHandler": [
                    "",
                    "sizes.sort(function(a,b){return a - b;});",
                    "",
                    "",
                    "var splicePiece = [0, 0],",
                    "    widestSize = sizes[sizes.length - 1];",
                    "",
                    "if (width * height < 350) {",
                    "    pull = \"French\";",
                    "    bestWidth = this.closeRoll(sizes, width);",
                    "    adjWidth = bestWidth - width;",
                    "    adjHeight = bestHeight - height;",
                    "    leftWidth = adjWidth * height; //adds up remainder of film",
                    "    leftHeight = adjHeight * width;",
                    "    bestHeight = this.closeRoll(sizes, height);",
                    "    worstRoll = (leftWidth < leftHeight) ? height : width;",
                    "    bestRoll = (leftWidth < leftHeight) ? bestWidth : bestHeight;",
                    "    actSqft = panes * width * height / 12;",
                    "    adjSqft = panes * bestRoll * worstRoll / 144;",
                    "    linearFt = panes * worstRoll / 12;",
                    "    //tPrice = linearFt * filmType;",
                    "    scrap = [(leftWidth > leftHeight) ? bestHeight - height : bestWidth - width, (leftWidth > leftHeight) ? width * panes : height * panes];",
                    "    excess = scrap[0] * scrap[1];",
                    "} else if ((width > widestSize) && (height > widestSize)) {",
                    "    pull = \"Oversized 2\";",
                    "    adjSqft = 0;",
                    "    excess = 0;",
                    "    bestRoll = widestSize;",
                    "    linearFt = 0;",
                    "    scrap = 0;",
                    "    actSqft = width * height * panes / 144;",
                    "    if (width > height) {",
                    "        splicePiece = [height - widestSize, width * panes];",
                    "        linearFt = width * panes / 12;",
                    "        height = widestSize;",
                    "    } else if (width < height) {",
                    "        splicePiece = [width - widestSize, height * panes];",
                    "        linearFt = height * panes / 12;",
                    "        width = widestSize;",
                    "    }",
                    "    //tPrice = linearFt * filmType;",
                    "} else if ((width > widestSize) | (height > widestSize)) {",
                    "    pull = \"Oversized 1\";",
                    "    bestWidth = this.closeRoll(sizes, width);",
                    "    bestHeight = this.closeRoll(sizes, height);",
                    "    adjWidth = bestWidth - width;",
                    "    adjHeight = bestHeight - height;",
                    "    leftWidth = adjWidth * height; //adds up remainder of film",
                    "    leftHeight = adjHeight * width;",
                    "    bestRoll = (width < height) ? bestWidth : bestHeight; // chooses smalles close roll",
                    "    worstRoll = (width < height) ? height : width;",
                    "    actSqft = panes * width * height / 144;",
                    "    adjSqft = panes * bestRoll * worstRoll / 144;",
                    "    linearFt = panes * worstRoll / 12;",
                    "    //tPrice = linearFt * filmType;",
                    "    scrap = [(width < height) ? bestRoll - width : bestRoll - height, (width < height) ? height * panes : width * panes];",
                    "    excess = scrap[0] * scrap[1];",
                    "} else {",
                    "    pull = \"Normal\";",
                    "    bestWidth = this.closeRoll(sizes, width);",
                    "    bestHeight = this.closeRoll(sizes, height);",
                    "    adjWidth = bestWidth - width;",
                    "    adjHeight = bestHeight - height;",
                    "    leftWidth = adjWidth * height; //adds up remainder of film",
                    "    leftHeight = adjHeight * width;",
                    "    bestRoll = (leftWidth < leftHeight) ? bestWidth : bestHeight;",
                    "    worstRoll = (leftWidth < leftHeight) ? height : width;",
                    "    actSqft = panes * width * height / 144;",
                    "    adjSqft = panes * bestRoll * worstRoll / 144;",
                    "    linearFt = worstRoll * panes / 12;",
                    "    //tPrice = linearFt * filmType;",
                    "    scrap = [(leftWidth > leftHeight) ? bestHeight - height : bestWidth - width, (leftWidth > leftHeight) ? width * panes : height * panes];",
                    "    excess = scrap[0] * scrap[1];",
                    "} //End if-else",
                    "",
                    "return [bestRoll, linearFt, adjSqft, actSqft, excess, pull, scrap, splicePiece];"
                ]
            },
            "designerId": "e79ff29f-9690-4185-8322-220406fdbacb"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "splitCut",
                "fn": "splitCut",
                "designer|params": [
                    "sizes",
                    "panes",
                    "width",
                    "height"
                ],
                "implHandler": [
                    "loPiece = (panes % 2) * width * height;",
                    "",
                    "if (width * height < 350) {",
                    "    pull = \"French\";",
                    "    bestWidth = this.closeRoll2(sizes, width);",
                    "    bestHeight = this.closeRoll2(sizes, height);",
                    "    adjWidth = bestWidth - width;",
                    "    adjHeight = bestHeight - height;",
                    "    leftWidth = adjWidth * height; //adds up remainder of film",
                    "    leftHeight = adjHeight * width;",
                    "    worstRoll = (leftWidth < leftHeight) ? height : width;",
                    "    bestRoll = (leftWidth < leftHeight) ? bestWidth : bestHeight;",
                    "    actSqft = panes * width * height / 12;",
                    "    adjSqft = panes * bestRoll * worstRoll / 144;",
                    "    linearFt = worstRoll * ((panes + (panes % 2)) / 2) / 12;",
                    "    //tPrice = linearFt * filmType;",
                    "    scrap = [(leftWidth > leftHeight) ? bestHeight - height : bestWidth - width, (leftWidth > leftHeight) ? width * panes : height * panes];",
                    "    excess = scrap[0] * scrap[1] + loPiece;",
                    "    bestRoll *= 2;",
                    "} else {",
                    "    pull = \"Split roll\";",
                    "    bestWidth = this.closeRoll2(sizes, width);",
                    "    bestHeight = this.closeRoll2(sizes, height);",
                    "    adjWidth = bestWidth - width;",
                    "    adjHeight = bestHeight - height;",
                    "    leftWidth = adjWidth * height; //adds up remainder of film",
                    "    leftHeight = adjHeight * width;",
                    "",
                    "    bestRoll = (width < height) ? bestWidth : bestHeight; // chooses smalles close roll",
                    "    worstRoll = (width < height) ? height : width;",
                    "",
                    "    actSqft = panes * width * height / 144;",
                    "    adjSqft = panes * bestRoll * worstRoll / 144;",
                    "    linearFt = worstRoll * ((panes + (panes % 2)) / 2) / 12;",
                    "    //tPrice = linearFt * filmType;",
                    "    scrap = [(width < height) ? bestRoll - width : bestRoll - height, (width < height) ? height * panes : width * panes];",
                    "    excess = ((scrap[0] * scrap[1]) * 2) + loPiece;",
                    "    bestRoll *= 2;",
                    "} //End if-else",
                    "",
                    "return [bestRoll, linearFt, adjSqft, actSqft, excess, pull, scrap];"
                ]
            },
            "designerId": "d9299c57-de84-46a6-bb0e-696e70533acf"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "closeRoll",
                "fn": "closeRoll",
                "designer|params": [
                    "sizes",
                    "number"
                ],
                "implHandler": [
                    "//var rollArray = [36, 48, 60, 72];//array represents the 4 roll sizes of window film",
                    "",
                    "var closest = sizes.filter(function(ele){return ele-number >= 0;}).sort()[0];",
                    "return closest;   "
                ]
            },
            "designerId": "6f6030b4-268b-49bf-9b95-a0021e181b71"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|userClassName": "closeRoll2",
                "fn": "closeRoll2",
                "designer|params": [
                    "sizes",
                    "number"
                ],
                "implHandler": [
                    "//var rollArray = [18, 24, 30, 36];//array represents the 4 roll sizes of window film",
                    "",
                    "halfSizes = [];",
                    "",
                    "Ext.each(sizes, function(size){halfSizes.push(size / 2);});",
                    "",
                    "var closest = halfSizes.filter(function(ele){return ele-number >= 0;}).sort()[0];",
                    "",
                    "return closest;   "
                ]
            },
            "designerId": "37c4e911-bf91-4741-8a5f-55c344b7898c"
        }
    ]
}